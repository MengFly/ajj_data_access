<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.akxy.mapper.StressMeasurePointMapper">
  <resultMap id="BaseResultMap" type="com.akxy.entity.StressMeasurePoint">
    <result column="ID" jdbcType="DECIMAL" property="id" />
    <result column="AREA_ID" jdbcType="DECIMAL" property="areaId" />
    <result column="NAME" jdbcType="VARCHAR" property="name" />
    <result column="TUNNEL_NAME" jdbcType="VARCHAR" property="tunnelName" />
    <result column="X" jdbcType="FLOAT" property="x" />
    <result column="Y" jdbcType="FLOAT" property="y" />
    <result column="Z" jdbcType="FLOAT" property="z" />
    <result column="DEPTH" jdbcType="FLOAT" property="depth" />
    <result column="DISTANCE" jdbcType="FLOAT" property="distance" />
    <result column="INITIAL_VALUE" jdbcType="FLOAT" property="initialValue" />
    <result column="YELLOW_WARNVALUE" jdbcType="FLOAT" property="yellowWarnvalue" />
    <result column="RED_WARNVALUE" jdbcType="FLOAT" property="redWarnvalue" />
    <result column="MEMO" jdbcType="VARCHAR" property="memo" />
    <result column="FROM_TIME" jdbcType="TIMESTAMP" property="fromTime" />
    <result column="TO_TIME" jdbcType="TIMESTAMP" property="toTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, AREA_ID, name, TUNNEL_NAME, x, y, z, depth, distance, INITIAL_VALUE, YELLOW_WARNVALUE, RED_WARNVALUE, memo,FROM_TIME,TO_TIME
  </sql>
  <!-- 插入测点 -->
	<insert id="writeMeasurePoint">
		INSERT INTO STRESS_MEASUREPOINT (
			ID,
			AREA_ID,
			NAME,
			TUNNEL_NAME,
			X,
			Y,
			Z,
			DEPTH,
			DISTANCE,
			INITIAL_VALUE,
			YELLOW_WARNVALUE,
			RED_WARNVALUE,
			MEMO,
			FROM_TIME,
			TO_TIME
		)
		VALUES(#{id,jdbcType=DECIMAL},#{areaId,jdbcType=DECIMAL},#{name,jdbcType=VARCHAR},#{tunnelName,jdbcType=VARCHAR},
		#{x,jdbcType=FLOAT},#{y,jdbcType=FLOAT},#{z,jdbcType=FLOAT},#{depth,jdbcType=FLOAT},#{distance,jdbcType=FLOAT},
		#{initialValue,jdbcType=FLOAT},#{yellowWarnvalue,jdbcType=FLOAT},#{redWarnvalue,jdbcType=FLOAT},
		#{memo,jdbcType=VARCHAR},#{fromTime,jdbcType=TIMESTAMP},#{toTime,jdbcType=TIMESTAMP})
		
	</insert>

	<!-- 获取该数据对应的MP_ID -->
	<select id="getMPID" resultType="java.lang.Long">
		select id from STRESS_MEASUREPOINT where TUNNEL_NAME=#{tunnelName,jdbcType=VARCHAR} and
		depth=#{depth,jdbcType=FLOAT} and distance=#{distance,jdbcType=FLOAT} AND ROWNUM=1
	</select>
	
	<!-- 得到所有测点信息 -->
	<select id="getAllPoint" resultMap="BaseResultMap">
		SELECT <include refid="Base_Column_List"/> FROM STRESS_MEASUREPOINT
	</select>
	
	<!-- 批量更新STRESS_MEASUREPOINT -->
	<update id="updateGroupData" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="begin"
            close=";end;" separator=";">
            update STRESS_MEASUREPOINT p
            set
            p.AREA_ID=#{item.areaId,jdbcType=DECIMAL},
			p.NAME=#{item.name,jdbcType=VARCHAR},
			p.TUNNEL_NAME=#{item.tunnelName,jdbcType=VARCHAR},
			p.X=#{item.x,jdbcType=FLOAT},
			p.Y=#{item.y,jdbcType=FLOAT},
			p.Z=#{item.z,jdbcType=FLOAT},
			p.DEPTH=#{item.depth,jdbcType=FLOAT},
			p.DISTANCE=#{item.distance,jdbcType=FLOAT},
			p.INITIAL_VALUE=#{item.initialValue,jdbcType=FLOAT},
			p.YELLOW_WARNVALUE=#{item.yellowWarnvalue,jdbcType=FLOAT},
			p.RED_WARNVALUE=#{item.redWarnvalue,jdbcType=FLOAT},
			p.MEMO=#{item.memo,jdbcType=VARCHAR},
			p.FROM_TIME=#{item.fromTime,jdbcType=TIMESTAMP},
			p.TO_TIME=#{item.toTime,jdbcType=TIMESTAMP}
		where p."ID"=#{item.id,jdbcType=DECIMAL}
        </foreach>
	</update>
	
</mapper>